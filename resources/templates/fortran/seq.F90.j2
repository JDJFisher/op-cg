{# Template imports #}
{% from 'fortran/macros.j2' import op_opt, comma %}

MODULE {{ kernel['name'] }}_module

  USE OP2_FORTRAN_DECLARATIONS
  USE OP2_FORTRAN_RT_SUPPORT
  USE ISO_C_BINDING
  USE OP2_CONSTANTS

  CONTAINS

  ! Include kernel function
  #include "{{ kernel['name'] }}.inc"



  ! Wrapper for kernel function
  SUBROUTINE {{ kernel['name'] }}_wrap ( & 
    {#
    #}
    {% for i in kernel['inds'] %}
    & opDat{{ i+1 }}Local, &
    {% endfor %}
    {#  
    #}
    {% for i in kernel['dirs'] + kernel['glbs'] %}
    & opDat{{ i+1 }}Local, &
    {% endfor %}
    {#
    #}
    {% for i in kernel['maps'] %}
    & opDat{{ i+1 }}Map, &
    & opDat{{ i+1 }}MapDim, & 
    {% endfor %}
    {#
    #}
    & bottom, &
    & top &
    & )

    IMPLICIT NONE

    {% for i in kernel['inds'] + kernel['dirs'] + kernel['glbs'] %}
    {% if kernel['args'][i] is without_dim %}
    INTEGER(kind=4) opDat{{ i+1 }}Dim
    {% set dim %}opDat{{ i+1 }}Dim{% endset %}
    {% else %}
    {% set dim = kernel['args'][i]['dim'] %}
    {% endif %}
    {{ kernel['args'][i]['typ'] }} opDat{{ i+1 }}Local({{ dim }}{% if  kernel['args'][i] is not global %},*{% endif %})
    {% endfor %}

    {% for i in kernel['maps'] %}
    INTEGER(kind=4) opDat{{ i+1 }}Map(*)
    INTEGER(kind=4) opDat{{ i+1 }}MapDim
    {% endfor %}
    INTEGER(kind=4) bottom,top,i1
    INTEGER(kind=4) 
    {# TODO: Finish #}
    {%- for i, arg in enumerate(kernel['args']) -%} 
    {# map{{ i }}idx{{ comma(loop) }}  #}
    {%- endfor %}


    DO i1 = bottom, top-1, 1
      {# TODO: Finish #}
      {% for i, arg in enumerate(kernel['args']) %} 
      {# map{{ i }}idx = opDat{{ i }}Map(1 + i1 * opDat{{ i }}MapDim + {{ arg['idx']-1 }})+1 #}
      {%- endfor %}


      ! Kernel call
      CALL {{ kernel['name'] }}( &
        {% for arg in kernel['args'] %}
          {% if arg is direct %}
            {% set idx = ',i1+1' %}
          {% elif arg is indirect %}
            {% set idx = ',map?????????idx' %}
          {% endif %}
        & opDat{{ loop.index }}Local(1{{ idx }}){{ comma(loop) }} &     
        {% endfor %}
      & )

    END DO


  END SUBROUTINE



  ! Host function for kernel
  SUBROUTINE {{ kernel['name'] }}_host ( &
    & kernel, &
    & set, &
    {% for _ in kernel['args'] %}
    & opArg{{ loop.index }}{{ comma(loop) }} &            
    {% endfor %}
    & )

    IMPLICIT NONE
    character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
    type ( op_set ) , INTENT(IN) :: set

    {% for _ in kernel['args'] %}
    type ( op_arg ) , INTENT(IN) :: opArg{{ loop.index }}
    {% endfor %}

    type ( op_arg ) , DIMENSION({{ kernel['args']|length }}) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming
    INTEGER(kind=4) :: n_upper
    type ( op_set_core ) , POINTER :: opSetCore


    {# Indirect #}
    {% for i in kernel['inds'] %}
    INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat{{ i+1 }}Map
    INTEGER(kind=4) :: opDat{{ i+1 }}MapDim
    {{ kernel['args'][i]['typ'] }}, POINTER, DIMENSION(:) :: opDat{{ i+1 }}Local
    INTEGER(kind=4) :: opDat{{ i+1 }}Cardinality

    {% endfor %}

    {# Direct #}
    {% for i in kernel['dirs'] %}
    {{ kernel['args'][i]['typ'] }}, POINTER, DIMENSION(:) :: opDat{{ i+1 }}Local
    INTEGER(kind=4) :: opDat{{ i+1 }}Cardinality

    {% endfor %}
      
    {# Global #}
    {% for i in kernel['glbs'] %}
    {{ kernel['args'][i]['typ'] }}, POINTER, DIMENSION(:) :: opDat{{ i+1 }}Local

    {% endfor %}

    {# TODO: Opts #}

    INTEGER(kind=4) :: i1
    REAL(kind=4) :: dataTransfer

    numberOfOpDats = {{ kernel['args']|length }}

    {% for _ in kernel['args'] %}
    opArgArray({{ loop.index }}) = opArg{{ loop.index }}      
    {% endfor %}

    returnSetKernelTiming = setKernelTime( &
      & {{ kernel['id'] }}, userSubroutine//C_NULL_CHAR, &
      & 0.0_8, 0.00000_4,0.00000_4, 0 &
    & )
    CALL op_timers_core(startTime)

    n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

    opSetCore => set%setPtr

    {% for i in kernel['inds'] %}
    opDat{{ i+1 }}Cardinality = opArg{{ i+1 }}%dim * getSetSizeFromOpArg(opArg{{ i+1 }})
    opDat{{ i+1 }}MapDim = getMapDimFromOpArg(opArg{{ i+1 }})
    {% endfor %}
    {% for i in kernel['dirs'] %}
    opDat{{ i+1 }}Cardinality = opArg{{ i+1 }}%dim * getSetSizeFromOpArg(opArg{{ i+1 }})
    {% endfor %}

    {% for i in kernel['inds'] %}
    CALL c_f_pointer(opArg{{ i+1 }}%data,opDat{{ i+1 }}Local,(/opDat{{ i+1 }}Cardinality/))
    CALL c_f_pointer(opArg{{ i+1 }}%map_data,opDat{{ i+1 }}Map,(/opSetCore%size*opDat{{ i+1 }}MapDim/))
    {% endfor %}

    {% for i in kernel['dirs'] %}
    CALL c_f_pointer(opArg{{ i+1 }}%data,opDat{{ i+1 }}Local,(/opDat{{ i+1 }}Cardinality/))
    {% endfor %}

    {% for i in kernel['glbs'] %}
    CALL c_f_pointer(opArg{{ i+1 }}%data,opDat{{ i+1 }}Local, (/opArg{{ i+1 }}%dim/))
    {% endfor %}


    CALL {{ kernel['name'] }}_wrap( &
      {#
      #}
      {% for i in kernel['inds'] %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  
      #}
      {% for i in kernel['dirs'] + kernel['glbs'] %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#
      #}
      {% for i in kernel['maps'] %}
      & opDat{{ i+1 }}Map, &
      & opDat{{ i+1 }}MapDim, & 
      {% endfor %}
      {#
      #}
      & 0, & 
      & opSetCore%core_size, & 
    & )

    CALL op_mpi_wait_all(numberOfOpDats, opArgArray)

    CALL {{ kernel['name'] }}_wrap( &
      {#
      #}
      {% for i in kernel['inds'] %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  
      #}
      {% for i in kernel['dirs'] + kernel['glbs'] %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#
      #}
      {% for i in kernel['maps'] %}
      & opDat{{ i+1 }}Map, &
      & opDat{{ i+1 }}MapDim, & 
      {% endfor %}
      {#
      #}
      & opSetCore%core_size, & 
      & n_upper &
    & )

    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    {% for arg in kernel['args'] if 'map' not in arg and arg['acc'] in ['OP_INC', 'OP_MIN', 'OP_MAX', 'OP_WRITE'] %}
    {% if 'opt' in arg %}IF opArg{{ loop.index }}%opt == 1 THEN{% endif %}
    {% if arg['typ'] in ['real(8)', 'REAL(kind=8)', 'real*8', 'r8'] %}
    CALL op_mpi_reduce_double(opArg{{ loop.index }}, opArg{{ loop.index }}%data)
    {% elif arg['typ'] in ['real(4)', 'REAL(kind=4)', 'real*4', 'r4'] %} 
    CALL op_mpi_reduce_float(opArg{{ loop.index }}, opArg{{ loop.index }}%data)
    {% elif arg['typ'] in ['integer(4)', 'INTEGER(kind=4)', 'integer*4', 'i4'] %}
    {CALL op_mpi_reduce_int(opArg{{ loop.index }}, opArg{{ loop.index }}%data)
    {% elif arg['typ'] in ['logical', 'logical*1'] %}
    CALL op_mpi_reduce_bool(opArg{{ loop.index }}, opArg{{ loop.index }}%data)
    {% endif %}
    {% if 'opt' in arg %}END IF{% endif %}
    {% endfor %}

    CALL op_timers_core(endTime)

    dataTransfer = 0.0

    {# No indirection #}
    {% if not kernel['inds'] | length %}
      {% for i, arg in enumerate(kernel['args']) %}
        {% call op_opt('opt' in arg) %}   
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size 
        {%- if 'map' in arg %} * opSetCore%size{% endif %} 
        {%- if arg['acc'] is not op_rw %} * 2.d0{% endif %}

        {% endcall %}
      {% endfor %}
    {# Indirection #}
    {% else %}
      {# Indirects #}
      {% for i in kernel['inds'] %}
        {% if 'opt' in kernel['args'][i] %}IF opArg{{ i+1 }}%opt == 1 THEN{% endif %}
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size ***** MIN(n_upper,getSetSizeFromOpArg(opArg{{ i+1 }}))
        {%- if kernel['args'][i]['acc'] is not op_rw %} * 2.d0{% endif %}

        {% if 'opt' in kernel['args'][i] %}END IF{% endif %}
      {% endfor %}
      {# Directs #}
      {% for i in kernel['dirs'] %}
        {% if 'opt' in kernel['args'][i] %}IF opArg{{ i+1 }}%opt == 1 THEN{% endif %}
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size * MIN(n_upper,getSetSizeFromOpArg(opArg{{ i+1 }}))
        {%- if kernel['args'][i]['acc'] is not op_rw %} * 2.d0{% endif %}

        {% if 'opt' in kernel['args'][i] %}END IF{% endif %}
      {% endfor %}
      {# Globals #}
      {% for i in kernel['dirs'] %}
        {% if 'opt' in kernel['args'][i] %}IF opArg{{ i+1 }}%opt == 1 THEN{% endif %}
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size
        {%- if kernel['args'][i]['acc'] is not op_rw %} * 2.d0{% endif %}

        {% if 'opt' in kernel['args'][i] %}END IF{% endif %}
      {% endfor %}
      {# Mappings #}
      {% for i in kernel['maps'] %}
    dataTransfer = dataTransfer + n_upper * opDat{{ i+1 }}MapDim * 4.d0
      {% endfor %}
    {% endif %}

    returnSetKernelTiming = setKernelTime( &
      & {{ kernel['id'] }}, kernel//C_NULL_CHAR, &
      & endTime-startTime, dataTransfer, 0.00000_4, 1 &
    & )
  END SUBROUTINE

END MODULE




