{# Template imports #}
{% from 'fortran/macros.j2' import op_opt, comma %}

MODULE {{ opt.name }}_{{ kernel.name }}_module

  USE OP2_FORTRAN_DECLARATIONS
  USE OP2_FORTRAN_RT_SUPPORT
  USE ISO_C_BINDING
  USE OP2_CONSTANTS

  CONTAINS

  ! Include kernel function
  #include "{{ kernel.name }}.inc"



  ! Wrapper for kernel function
  SUBROUTINE {{ kernel.name }}_wrap ( & 
    {# #}
    {% for i in kernel.indirectVars %}
    & opDat{{ i+1 }}Local, &
    {% endfor %}
    {#  #}
    {% for i in kernel.directs %}
    & opDat{{ i+1 }}Local, &
    {% endfor %}
    {#  #}
    {% for i in kernel.globals %}
    & opDat{{ i+1 }}Local, &
    {% endfor %}
    {#  #}
    {% for i in kernel.indirectMaps %}
    & opDat{{ i+1 }}Map, &
    & opDat{{ i+1 }}MapDim, & 
    {% endfor %}
    {#  #}
    & bottom, &
    & top &
    & )

    IMPLICIT NONE

    {% for i, arg in kernel.indirectVars.items() %}
    {% if arg is without_dim %}
    INTEGER(kind=4) opDat{{ i+1 }}Dim
    {% set dim %}opDat{{ i+1 }}Dim{% endset %}
    {% else %}
    {% set dim = arg.dim %}
    {% endif %}
    {{ arg.typ }} opDat{{ i+1 }}Local({{ dim }},*)
    {% endfor %}

    {% for i, arg in kernel.directs.items() %}
    {% if arg is without_dim %}
    INTEGER(kind=4) opDat{{ i+1 }}Dim
    {% set dim %}opDat{{ i+1 }}Dim{% endset %}
    {% else %}
    {% set dim = arg.dim %}
    {% endif %}
    {{ arg.typ }} opDat{{ i+1 }}Local({{ dim }},*)
    {% endfor %}

    {% for i, arg in kernel.globals.items() %}
    {% if arg is without_dim %}
    INTEGER(kind=4) opDat{{ i+1 }}Dim
    {% set dim %}opDat{{ i+1 }}Dim{% endset %}
    {% else %}
    {% set dim = arg.dim %}
    {% endif %}
    {{ arg.typ }} opDat{{ i+1 }}Local({{ dim }})
    {% endfor %}

    {% for i in kernel.indirectMaps %}
    INTEGER(kind=4) opDat{{ i+1 }}Map(*)
    INTEGER(kind=4) opDat{{ i+1 }}MapDim
    {% endfor %}
    INTEGER(kind=4) bottom,top,i1
    INTEGER(kind=4) {% for i in kernel.indirectMapRefs -%} 
    map{{ i+1 }}idx{{ comma(loop) }} 
    {%- endfor %}


    DO i1 = bottom, top-1, 1
      {# TODO: Refactor #}
      {%- for i, arg1 in kernel.indirectMaps.items() %} 
      {%-   for j, arg2 in kernel.indirectMapRefs.items() %} 
      {%-     if arg1.map == arg2.map %} 
      map{{ j+1 }}idx = opDat{{ i+1 }}Map(1 + i1 * opDat{{ i+1 }}MapDim + {{ arg2['idx']-1 }})+1
      {%-     endif %}
      {%-   endfor %}
      {%- endfor %}


      ! Kernel call
      {# TODO: Refactor #}
      CALL {{ kernel.name }}( &
      {%  for i, arg in kernel.args.items() %}
      {%    if arg is global %}
        & opDat{{ i+1 }}Local(1){{ comma(loop) }} &     
      {%    elif arg is direct %}
        & opDat{{ i+1 }}Local(1,i1+1){{ comma(loop) }} &     
      {%    elif arg is indirect %}
      {%      for j, arg2 in kernel.indirectMapRefs.items() -%} 
      {%        if arg.map == arg2.map and arg.idx == arg2.idx %} 
        & opDat{{ i+1 }}Local(1,map{{ j+1 }}idx){{ comma(loop) }} &     
      {%        endif %}
      {%      endfor %}
      {%    endif %}
      {%  endfor %}
      & )

    END DO


  END SUBROUTINE



  ! Host function for kernel
  SUBROUTINE op_par_loop_{{ kernel.name }}_host ( &
    & kernel, &
    & set, &
    {% for i in kernel.args %}
    & opArg{{ i+1 }}{{ comma(loop) }} &            
    {% endfor %}
    & )

    IMPLICIT NONE
    character(kind=c_char,len=*), INTENT(IN) :: userSubroutine
    type ( op_set ) , INTENT(IN) :: set

    {% for i in kernel.args %}
    type ( op_arg ) , INTENT(IN) :: opArg{{ i+1 }}
    {% endfor %}

    type ( op_arg ) , DIMENSION({{ kernel.args | length }}) :: opArgArray
    INTEGER(kind=4) :: numberOfOpDats
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayStart
    INTEGER(kind=4), DIMENSION(1:8) :: timeArrayEnd
    REAL(kind=8) :: startTime
    REAL(kind=8) :: endTime
    INTEGER(kind=4) :: returnSetKernelTiming
    INTEGER(kind=4) :: n_upper
    type ( op_set_core ) , POINTER :: opSetCore


    {# Indirect #}
    {% for i, arg in kernel.indirectVars.items() %}
    INTEGER(kind=4), POINTER, DIMENSION(:) :: opDat{{ i+1 }}Map
    INTEGER(kind=4) :: opDat{{ i+1 }}MapDim
    {{ arg.typ }}, POINTER, DIMENSION(:) :: opDat{{ i+1 }}Local
    INTEGER(kind=4) :: opDat{{ i+1 }}Cardinality
    {% endfor %}

    {# Direct #}
    {% for i, arg in kernel.directs.items() %}
    {{ arg.typ }}, POINTER, DIMENSION(:) :: opDat{{ i+1 }}Local
    INTEGER(kind=4) :: opDat{{ i+1 }}Cardinality
    {% endfor %}
      
    {# Global #}
    {% for i, arg in kernel.globals.items() %}
    {{ arg.typ }}, POINTER, DIMENSION(:) :: opDat{{ i+1 }}Local
    {% endfor %}
    {# TODO: Opts #}

    INTEGER(kind=4) :: i1
    REAL(kind=4) :: dataTransfer

    numberOfOpDats = {{ kernel.args | length }}

    {% for i in kernel.args %}
    opArgArray({{ i+1 }}) = opArg{{ i+1 }}      
    {% endfor %}

    returnSetKernelTiming = setKernelTime( &
      & {{ id }}, userSubroutine//C_NULL_CHAR, &
      & 0.0_8, 0.00000_4,0.00000_4, 0 &
    & )
    CALL op_timers_core(startTime)

    n_upper = op_mpi_halo_exchanges(set%setCPtr,numberOfOpDats,opArgArray)

    opSetCore => set%setPtr

    {% for i in kernel.indirectVars %}
    opDat{{ i+1 }}Cardinality = opArg{{ i+1 }}%dim * getSetSizeFromOpArg(opArg{{ i+1 }})
    opDat{{ i+1 }}MapDim = getMapDimFromOpArg(opArg{{ i+1 }})
    {% endfor %}
    {% for i in kernel.directs %}
    opDat{{ i+1 }}Cardinality = opArg{{ i+1 }}%dim * getSetSizeFromOpArg(opArg{{ i+1 }})
    {% endfor %}

    {% for i in kernel.indirectVars %}
    CALL c_f_pointer(opArg{{ i+1 }}%data,opDat{{ i+1 }}Local,(/opDat{{ i+1 }}Cardinality/))
    CALL c_f_pointer(opArg{{ i+1 }}%map_data,opDat{{ i+1 }}Map,(/opSetCore%size*opDat{{ i+1 }}MapDim/))
    {% endfor %}

    {% for i in kernel.directs %}
    CALL c_f_pointer(opArg{{ i+1 }}%data,opDat{{ i+1 }}Local,(/opDat{{ i+1 }}Cardinality/))
    {% endfor %}

    {% for i in kernel.globals %}
    CALL c_f_pointer(opArg{{ i+1 }}%data,opDat{{ i+1 }}Local, (/opArg{{ i+1 }}%dim/))
    {% endfor %}


    CALL {{ kernel.name }}_wrap( &
      {# #}
      {% for i in kernel.indirectVars %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  #}
      {% for i in kernel.directs %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  #}
      {% for i in kernel.globals %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  #}
      {% for i in kernel.indirectMaps %}
      & opDat{{ i+1 }}Map, &
      & opDat{{ i+1 }}MapDim, & 
      {% endfor %}
      {#  #}
      & 0, & 
      & opSetCore%core_size, & 
    & )

    CALL op_mpi_wait_all(numberOfOpDats, opArgArray)

    CALL {{ kernel.name }}_wrap( &
      {# #}
      {% for i in kernel.indirectVars %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  #}
      {% for i in kernel.directs %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  #}
      {% for i in kernel.globals %}
      & opDat{{ i+1 }}Local, &
      {% endfor %}
      {#  #}
      {% for i in kernel.indirectMaps %}
      & opDat{{ i+1 }}Map, &
      & opDat{{ i+1 }}MapDim, & 
      {% endfor %}
      {#  #}
      & opSetCore%core_size, & 
      & n_upper &
    & )

    IF ((n_upper .EQ. 0) .OR. (n_upper .EQ. opSetCore%core_size)) THEN
      CALL op_mpi_wait_all(numberOfOpDats,opArgArray)
    END IF

    CALL op_mpi_set_dirtybit(numberOfOpDats,opArgArray)

    {% for i, arg in kernel.globals.items() %} 
    {%   if arg.acc in ['OP_INC', 'OP_MIN', 'OP_MAX', 'OP_WRITE'] %}
    {%     call op_opt(i, arg) %} 
    {%     if arg.typ in ['real(8)', 'REAL(kind=8)', 'real*8', 'r8'] %}
    CALL op_mpi_reduce_double(opArg{{ i+1 }}, opArg{{ i+1 }}%data)
    {%     elif arg.typ in ['real(4)', 'REAL(kind=4)', 'real*4', 'r4'] %} 
    CALL op_mpi_reduce_float(opArg{{ i+1 }}, opArg{{ i+1 }}%data)
    {%     elif arg.typ in ['integer(4)', 'INTEGER(kind=4)', 'integer*4', 'i4'] %}
    {CALL op_mpi_reduce_int(opArg{{ i+1 }}, opArg{{ i+1 }}%data)
    {%     elif arg.typ in ['logical', 'logical*1'] %}
    CALL op_mpi_reduce_bool(opArg{{ i+1 }}, opArg{{ i+1 }}%data)
    {%     endif %}
    {%     endcall %}
    {%   endif %}
    {% endfor %}

    CALL op_timers_core(endTime)

    dataTransfer = 0.0

    {# No indirection #}
    {% if not kernel.indirection %}
    {%   for i, arg in kernel.args.items() %}
    {%     call op_opt(i, arg) %}   
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size 
    {%-    if arg is not global %} * opSetCore%size{% endif %} 
    {%-    if arg is not r_o_w_acc %} * 2.d0{% endif %}
    {%     endcall %}
    {%   endfor %}
    {# Indirection #}
    {% else %}
    {#   Indirects #}
    {%   for i, arg in kernel.indirectVars.items() %}
    {%     call op_opt(i, arg) %} 
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size * MIN(n_upper,getSetSizeFromOpArg(opArg{{ i+1 }}))
    {%-    if arg is not r_o_w_acc %} * 2.d0{% endif %}
    {%     endcall %}
    {%   endfor %}
    {#   Directs #}
    {%   for i, arg in kernel.directs.items() %}
    {%     call op_opt(i, arg) %} 
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size * MIN(n_upper,getSetSizeFromOpArg(opArg{{ i+1 }}))
    {%-    if arg is not r_o_w_acc %} * 2.d0{% endif %}
    {%     endcall %}
    {%   endfor %}
    {#   Globals #}
    {%   for i, arg in kernel.globals.items() %}
    {%     call op_opt(i, arg) %} 
    dataTransfer = dataTransfer + opArg{{ i+1 }}%size
    {%-    if arg is not r_o_w_acc %} * 2.d0{% endif %}
    {%     endcall %}
    {%   endfor %}
    {#   Mappings #}
    {%   for i in kernel.indirectMaps %}
    dataTransfer = dataTransfer + n_upper * opDat{{ i+1 }}MapDim * 4.d0
    {%   endfor %}
    {% endif %}

    returnSetKernelTiming = setKernelTime( &
      & {{ id }}, kernel//C_NULL_CHAR, &
      & endTime-startTime, dataTransfer, 0.00000_4, 1 &
    & )
  END SUBROUTINE

END MODULE




